@page "/register"
@inject IAuthService AuthService
@inject ICategoryService CategoryService

<PageTitle>Register</PageTitle>

<h3>Register</h3>

<EditForm Model="user" OnValidSubmit="HandleRegistration" OnInvalidSubmit="HandleInvalidRegistration" id="registerForm">
    <DataAnnotationsValidator />
    <div class="mb-3">
        <label for="name">Name</label>
        <InputText id="name" @bind-Value="user.Name" class="form-control" />
        <ValidationMessage For="@(() => user.Name)" />
    </div>
    <div class="mb-3">
        <label for="email">Email</label>
        <InputText id="email" @bind-Value="user.Email" class="form-control" />
        <ValidationMessage For="@(() => user.Email)" />
    </div>
    <div class="mb-3">
        <label for="password">Password</label>
        <InputText id="password" @bind-Value="user.Password" class="form-control" type="password" />
        <ValidationMessage For="@(() => user.Password)" />
    </div>
    <div class="mb-3">
        <label for="confirmPassword">Confirm Password</label>
        <InputText id="confirmPassword" @bind-Value="user.ConfirmPassword" class="form-control" type="password" />
        <ValidationMessage For="@(() => user.ConfirmPassword)" />
    </div>
    <div class="mb-3">
        <label for="acceptMessages">
            Do you accept to receive messages from other users (e.g To ask for additional
            information on a product)?
        </label>
        <InputRadioGroup id="acceptMessages" @bind-Value="user.AcceptsMessages" class="form-control">
            <div>
                <InputRadio Value="true" /> Yes
                <br />
                <InputRadio Value="false" /> No
            </div>
        </InputRadioGroup>
    </div>
   @* <div class="mb-3">
        <label>Please select the categories that interest you:</label>
        <br />
        @foreach (var item in AllCategories)
        {
            <input type="checkbox" @onchange="eventArgs => { CheckboxClicked(item, eventArgs.Value); }" />
            @item.Name
            <br>
        }
        <ValidationMessage For="@(() => user.UserInterests)" />
    </div>*@

    <button type="submit" class="btn btn-primary">Register</button>

    <div class="@_messageCssClass">
        <span>@_message</span>
    </div>
</EditForm>



@code {
    UserRegister user = new();
    //public ICollection<Category> AllCategories = new List<Category>();
    //public ICollection<Category> UserCategories { get; set; } = new List<Category>();

    string _message = string.Empty;
    string _messageCssClass = string.Empty;

    //protected override async Task OnInitializedAsync()
    //{
    //    await CategoryService.GetCategories();
    //    AllCategories = CategoryService.Categories;
    //}

    //public void CheckboxClicked(Category category, object checkedValue)
    //{
    //    if ((bool)checkedValue)
    //    {
    //        if (!UserCategories.Contains(category))
    //        {
    //            UserCategories.Add(category);
    //            Console.WriteLine($"Added {category.Name}");
    //        }
    //    }
    //    else
    //    {
    //        if (UserCategories.Contains(category))
    //        {
    //            UserCategories.Remove(category);
    //            Console.WriteLine($"Removed {category.Name}");
    //        }
    //    }
    //    user.UserInterests = UserCategories;
    //}

    async Task HandleRegistration()
    {
        var result = await AuthService.Register(user);
        _message = result.Message;
        if (result.Success)
        {
            _messageCssClass = "text-success";
            NavigationManager.NavigateTo("");
        }
        else
            _messageCssClass = "text-danger";
    }

    void HandleInvalidRegistration()
    {
        _message = "Something went wrong.";
    }

}



