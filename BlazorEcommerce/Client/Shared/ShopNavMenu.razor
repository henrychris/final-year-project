@inject ICategoryService CategoryService
@implements IDisposable

<div class="top-row ps-3 navbar navbar-dark navbar-toggler-wrapper">
    <div class="container-fluid">
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <nav class="flex-nav">
        <div class="nav-item px-2">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                Home
            </NavLink>
        </div>
        <AuthorizeView>
            <NotAuthorized>
                @foreach (var category in CategoryService.Categories)
                {
                    <div class="nav-item px-3">
                        <NavLink class="nav-link" href="@category.Url">
                            @category.Name
                        </NavLink>
                    </div>
                }
            </NotAuthorized>
            <Authorized>
                @foreach (var category in UserService.UserCategories)
                {
                    <div class="nav-item px-3">
                        <NavLink class="nav-link" href="@category.Url">
                            @category.Name
                        </NavLink>
                    </div>
                }
            </Authorized>
        </AuthorizeView>
    </nav>
</div>

@code {
    private bool _collapseNavMenu = true;

    private string? NavMenuCssClass => _collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        _collapseNavMenu = !_collapseNavMenu;
    }

    protected override async Task OnInitializedAsync()
    {
        await CategoryService.GetCategories();

        var state = await StateProvider.GetAuthenticationStateAsync();
        var user = state.User;
        var role = user.Claims.Where(a => a.Type == ClaimTypes.Role).Select(a => a.Value).FirstOrDefault();
        Console.WriteLine(role);

        CategoryService.OnChange += StateHasChanged;

        if (user.IsInRole("Customer"))
        {
            var id = Convert.ToInt32(user.Claims.Where(a => a.Type == ClaimTypes.NameIdentifier).Select(a => a.Value).FirstOrDefault());
            await UserService.GetUserInterests(id);
        }
    }

    public void Dispose()
    {
        CategoryService.OnChange -= StateHasChanged;
    }
}
