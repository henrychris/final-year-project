@using global::Shared
@inject IUserService UserService
@inject IReviewService ReviewService

<h3 align="center">Reviews</h3>


@if (_reviews == null)
{
    <div>
        <p>No Reviews found</p>
    </div>
}
else
{
    <div class="mb-3">
        <ul class="review-card">
            @foreach (var review in _reviews)
            {
                <li>
                    <div id="review">
                        <div>
                            <p>
                                <a href="/user/@review.MadeByUserId">
                                    <b>@GetUserName(review.MadeByUserId)</b>
                                </a>
                                <br />
                                <RadzenRating ReadOnly="true" Stars="@review.Rating" Value="@review.Rating" />
                            </p>
                        </div>
                        <div>
                            <p>
                                @review.ReviewText
                            </p>
                        </div>
                        <div>
                            @*<button @onclick="@(e => AddLike(@review.Id, @review.MadeByUserId))">Helpful</button>
                                @* here... i am not sure how to update the like count cleanly
                                @switch (_likeCount)
                                {
                                case > 1:
                                @_likeCount <p class="helpful-text"> people found this helpful. </p>
                                break;
                                case 1:
                                <p class="helpful-text"> 1 person found this helpful. </p>
                                break;
                                default:
                                <p class="helpful-text"> No one found this helpful.</p>
                                break;
                                }
                            *@
                        </div>
                    </div>
                </li>
            }
        </ul>
    </div>
}
<div class="mb-3">
    <label>
        <EditForm Model="@_newReview" OnValidSubmit="@HandleValidSubmit">
            New Review:
            <div>
                <RadzenRating @bind-Value="@_tempRating" Stars="5" />
            </div>
            <div>
                <InputTextArea @bind-Value="_newReview.ReviewText" class="form-control" />
            </div>
            <br>
            <div>
                <button type="submit" class="btn btn-primary">Post Review </button>
            </div>
        </EditForm>
    </label>
    <RadzenNotification />
</div>


@code {
    [Parameter]
    public int ProductId { get; set; }
    private List<Review> _reviews;
    private List<User> _users;
    List<OrderOverviewResponse> _orders = null;
    private int _loggedInUserId;
    public bool UserPurchasedProduct = false;
    private Product Product { get; set; }
    //private int _likeCount;
    // todo this like count attr is shared by all reviews. that is not smart.

    private int _tempRating;
    private Review _newReview = new();

    protected override async Task OnParametersSetAsync()
    {
        _reviews = await ReviewService.GetReviewsForAProduct(ProductId);
        _users = await UserService.GetAllUsers();

        var state = await StateProvider.GetAuthenticationStateAsync();
        var loggedInUserState = state.User;
        _loggedInUserId = Convert.ToInt32(loggedInUserState.Claims.Where(a => a.Type == ClaimTypes.NameIdentifier).Select(a =>
        a.Value).FirstOrDefault());

        _orders = await OrderService.GetOrders();
        Product = await GetProduct();
    }

    //protected override Task OnAfterRenderAsync(bool firstRender)
    //{
    //    @* use signalR to send notification that user has viewed message
    //        Maybe add boolean value to track Seen/Delivered?
    //    *@
    //    return base.OnAfterRenderAsync(firstRender);
    //}

    private async Task HandleValidSubmit()
    {
        _newReview.MadeByUserId = _loggedInUserId;
        _newReview.OnProductId = ProductId;
        _newReview.Rating = _tempRating;

        CheckUserOrderHistory();

        if (UserPurchasedProduct)
        {
            var result = await ReviewService.CreateReview(_newReview);
            if (result.Success)
            {
                Console.WriteLine(result.Message);
                NavigationManager.NavigateTo("");
                NavigationManager.NavigateTo($"product/{ProductId}");
                NotificationService.Notify(new NotificationMessage
                    {
                        Detail = "Thanks for leaving a review!",
                        Severity = NotificationSeverity.Success,
                        Duration = 4000
                    });
            }
            else
            {
                Console.WriteLine(result.Message);
                NavigationManager.NavigateTo("");
                NavigationManager.NavigateTo($"product/{ProductId}");
            }
        }
        else
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Detail = "You need to purchase the product before leaving a review.",
                    Severity = NotificationSeverity.Error,
                    Duration = 4000
                });
            Console.WriteLine("You need to purchase the product before leaving a review.");
        }
    }

    private string GetUserName(int userId)
    {
        foreach (var user in _users.Where(user => user.Id == userId))
        {
            return user.Name;
        }
        return "Unknown";
    }

    private void CheckUserOrderHistory()
    {
        foreach (var order in _orders.Where(order => order.Product == Product.Title))
        {
            UserPurchasedProduct = true;
        }
    }

    private async Task<Product> GetProduct()
    {
        var result = await ProductService.GetProduct(ProductId);
        return result.Data;
    }

    //private async Task AddLike(int reviewId, int reviewMadeByUserId)
    //{
    //    await LikesService.AddLike(reviewId, reviewMadeByUserId, _loggedInUserId);
    //    _likeCount = await LikesService.GetLikeCountForAReview(reviewId);
    //    StateHasChanged();
    //     TODO add like count to review table?
    //}
    }
