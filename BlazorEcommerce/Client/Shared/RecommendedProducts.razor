<center><h2>Top Products For You</h2></center>

<div class="container">
    @foreach (var product in displayedRecommendedProducts)
    {

        <div class="featured-product">
            <div>
                <a href="product/@product.Id">
                    <img src="@product.ImageUrl">
                </a>
            </div>
            <h4><a href="product/@product.Id">@product.Title</a></h4>
            @if (product.Variants != null && product.Variants.Count > 0)
            {
                <h5 class="price">
                    $@product.Variants[0].Price
                </h5>
            }
        </div>
    }
</div>

@code {

    List<Product> recommendedProducts = new();
    List<Product> displayedRecommendedProducts = new();
    static Random _random = new Random();

    protected override async Task OnInitializedAsync()
    {
        ProductService.ProductsChanged += StateHasChanged;
        await ProductService.GetAllProducts();
        await GetRecommendedProducts();
    }

    async Task GetRecommendedProducts()
    {

        // Get State and UserId
        var state = await StateProvider.GetAuthenticationStateAsync();
        var user = state.User;
        var userId = Convert.ToInt32(user.Claims.Where(a => a.Type == ClaimTypes.NameIdentifier).Select(a => a.Value).FirstOrDefault());

        foreach (var item in ProductService.Products)
        {
            var result = await PredictService.GetProductRecommendation(new ProductDataModel
                {
                    ProductId = item.Id,
                    UserId = userId
                });

            if (result)
            {
                recommendedProducts.Add(item);
                Console.WriteLine($"{item.Title}, ProductId: {item.Id}");
            }
        }
        ReturnRandomRecommendedProducts(recommendedProducts);
    }

    void ReturnRandomRecommendedProducts(List<Product> products)
    {
        for (int i = 0; i < 3; i++)
        {
            int r = _random.Next(products.Count);
            displayedRecommendedProducts.Add(products[r]);
            products.Remove(products[r]);
        }
    }

    public void Dispose()
    {
        ProductService.ProductsChanged -= StateHasChanged;
    }
}
